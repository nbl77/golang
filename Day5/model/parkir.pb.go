// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v4.0.0
// source: model/parkir.proto

package model

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Queue) Reset() {
	*x = Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_parkir_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_model_parkir_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_model_parkir_proto_rawDescGZIP(), []int{0}
}

func (x *Queue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Queue) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Parkir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tipe string `protobuf:"bytes,2,opt,name=tipe,proto3" json:"tipe,omitempty"`
	Plat string `protobuf:"bytes,3,opt,name=plat,proto3" json:"plat,omitempty"`
}

func (x *Parkir) Reset() {
	*x = Parkir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_parkir_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parkir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parkir) ProtoMessage() {}

func (x *Parkir) ProtoReflect() protoreflect.Message {
	mi := &file_model_parkir_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parkir.ProtoReflect.Descriptor instead.
func (*Parkir) Descriptor() ([]byte, []int) {
	return file_model_parkir_proto_rawDescGZIP(), []int{1}
}

func (x *Parkir) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Parkir) GetTipe() string {
	if x != nil {
		return x.Tipe
	}
	return ""
}

func (x *Parkir) GetPlat() string {
	if x != nil {
		return x.Plat
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Second  string `protobuf:"bytes,3,opt,name=second,proto3" json:"second,omitempty"`
	Total   string `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_parkir_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_model_parkir_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_model_parkir_proto_rawDescGZIP(), []int{2}
}

func (x *Result) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Result) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

func (x *Result) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

type QueueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QList []*Queue `protobuf:"bytes,1,rep,name=QList,proto3" json:"QList,omitempty"`
}

func (x *QueueList) Reset() {
	*x = QueueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_parkir_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueList) ProtoMessage() {}

func (x *QueueList) ProtoReflect() protoreflect.Message {
	mi := &file_model_parkir_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueList.ProtoReflect.Descriptor instead.
func (*QueueList) Descriptor() ([]byte, []int) {
	return file_model_parkir_proto_rawDescGZIP(), []int{3}
}

func (x *QueueList) GetQList() []*Queue {
	if x != nil {
		return x.QList
	}
	return nil
}

var File_model_parkir_proto protoreflect.FileDescriptor

var file_model_parkir_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x22, 0x68, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x2f, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x05, 0x51, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x51, 0x4c, 0x69,
	0x73, 0x74, 0x32, 0x9f, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x49, 0x44, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x04,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_parkir_proto_rawDescOnce sync.Once
	file_model_parkir_proto_rawDescData = file_model_parkir_proto_rawDesc
)

func file_model_parkir_proto_rawDescGZIP() []byte {
	file_model_parkir_proto_rawDescOnce.Do(func() {
		file_model_parkir_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_parkir_proto_rawDescData)
	})
	return file_model_parkir_proto_rawDescData
}

var file_model_parkir_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_model_parkir_proto_goTypes = []interface{}{
	(*Queue)(nil),       // 0: model.Queue
	(*Parkir)(nil),      // 1: model.Parkir
	(*Result)(nil),      // 2: model.Result
	(*QueueList)(nil),   // 3: model.QueueList
	(*empty.Empty)(nil), // 4: google.protobuf.Empty
}
var file_model_parkir_proto_depIdxs = []int32{
	0, // 0: model.QueueList.QList:type_name -> model.Queue
	4, // 1: model.ParkirService.GetID:input_type -> google.protobuf.Empty
	4, // 2: model.ParkirService.GetList:input_type -> google.protobuf.Empty
	1, // 3: model.ParkirService.Exit:input_type -> model.Parkir
	0, // 4: model.ParkirService.GetID:output_type -> model.Queue
	3, // 5: model.ParkirService.GetList:output_type -> model.QueueList
	2, // 6: model.ParkirService.Exit:output_type -> model.Result
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_model_parkir_proto_init() }
func file_model_parkir_proto_init() {
	if File_model_parkir_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_parkir_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_parkir_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parkir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_parkir_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_parkir_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_parkir_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_model_parkir_proto_goTypes,
		DependencyIndexes: file_model_parkir_proto_depIdxs,
		MessageInfos:      file_model_parkir_proto_msgTypes,
	}.Build()
	File_model_parkir_proto = out.File
	file_model_parkir_proto_rawDesc = nil
	file_model_parkir_proto_goTypes = nil
	file_model_parkir_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ParkirServiceClient is the client API for ParkirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ParkirServiceClient interface {
	GetID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Queue, error)
	GetList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*QueueList, error)
	Exit(ctx context.Context, in *Parkir, opts ...grpc.CallOption) (*Result, error)
}

type parkirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkirServiceClient(cc grpc.ClientConnInterface) ParkirServiceClient {
	return &parkirServiceClient{cc}
}

func (c *parkirServiceClient) GetID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/model.ParkirService/GetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkirServiceClient) GetList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*QueueList, error) {
	out := new(QueueList)
	err := c.cc.Invoke(ctx, "/model.ParkirService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkirServiceClient) Exit(ctx context.Context, in *Parkir, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/model.ParkirService/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkirServiceServer is the server API for ParkirService service.
type ParkirServiceServer interface {
	GetID(context.Context, *empty.Empty) (*Queue, error)
	GetList(context.Context, *empty.Empty) (*QueueList, error)
	Exit(context.Context, *Parkir) (*Result, error)
}

// UnimplementedParkirServiceServer can be embedded to have forward compatible implementations.
type UnimplementedParkirServiceServer struct {
}

func (*UnimplementedParkirServiceServer) GetID(context.Context, *empty.Empty) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (*UnimplementedParkirServiceServer) GetList(context.Context, *empty.Empty) (*QueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedParkirServiceServer) Exit(context.Context, *Parkir) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}

func RegisterParkirServiceServer(s *grpc.Server, srv ParkirServiceServer) {
	s.RegisterService(&_ParkirService_serviceDesc, srv)
}

func _ParkirService_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkirServiceServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.ParkirService/GetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkirServiceServer).GetID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkirService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkirServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.ParkirService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkirServiceServer).GetList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkirService_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parkir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkirServiceServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.ParkirService/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkirServiceServer).Exit(ctx, req.(*Parkir))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParkirService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.ParkirService",
	HandlerType: (*ParkirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetID",
			Handler:    _ParkirService_GetID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ParkirService_GetList_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _ParkirService_Exit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/parkir.proto",
}
